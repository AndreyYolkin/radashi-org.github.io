---
import { flattenSidebar, type SidebarEntry } from '../utils/navigation';
import Icon from '../user-components/Icon.astro';
import Badge from '../user-components/Badge.astro';

interface Props {
	sublist: SidebarEntry[];
	nested?: boolean;
}

const { sublist, nested } = Astro.props;
---

<ul class:list={{ 'top-level': !nested }}>
	{
		sublist.map((entry) =>
			entry.type === 'separator' ? (
				<hr style={{ border: entry.separator }} />
			) : (
				<li>
					{entry.type === 'link' ? (
						<a
							href={entry.href}
							aria-current={entry.isCurrent && 'page'}
							class:list={[{ large: !nested }, entry.attrs.class]}
							{...entry.attrs}
						>
							{entry.icon && (
								<img
									{...entry.icon.attrs}
									src={entry.icon.src}
									class:list={['sidebar-icon', entry.icon.attrs?.class]}
								/>
							)}
							{entry.label != null && <span>{entry.label}</span>}
							{entry.badge && (
								<Badge
									variant={entry.badge.variant}
									class={entry.badge.class}
									text={entry.badge.text}
								/>
							)}
						</a>
					) : entry.label != null ? (
						<details
							open={flattenSidebar(entry.entries).some((i) => i.isCurrent) || !entry.collapsed}
						>
							<summary>
								<div class="group-label">
									<span class="large">{entry.label}</span>
									{entry.badge && (
										<Badge
											variant={entry.badge.variant}
											class={entry.badge.class}
											text={entry.badge.text}
										/>
									)}
								</div>
								<Icon name="right-caret" class="caret" size="1.25rem" />
							</summary>
							<Astro.self sublist={entry.entries} nested />
						</details>
					) : (
						<Astro.self sublist={entry.entries} nested />
					)}
				</li>
			)
		)
	}
</ul>

<script>
	swup.hooks.on('content:replace', () => {
		const url = swup.getCurrentUrl();

		const prevPageLink = document.querySelector('.sidebar-content [aria-current="page"]');
		prevPageLink?.removeAttribute('aria-current');

		const currPageLink = document.querySelector(`.sidebar-content a[href="${url}"]`);
		currPageLink?.setAttribute('aria-current', 'page');
	});
</script>

<style>
	hr {
		display: block;
		width: calc(100% + 2rem);
		margin-top: 1rem;
		margin-bottom: 1rem;
		margin-left: -1rem;
	}

	.sidebar-icon {
		display: inline-block;
	}

	ul {
		list-style: none;
		padding: 0;
	}

	li {
		overflow-wrap: anywhere;
	}

	ul ul li {
		margin-inline-start: var(--sl-sidebar-item-padding-inline);
		border-inline-start: 1px solid var(--sl-color-hairline-light);
		padding-inline-start: var(--sl-sidebar-item-padding-inline);
	}

	.large {
		font-size: var(--sl-text-lg);
	}

	.top-level > li + li {
		margin-top: 0.75rem;
		font-weight: 600;
		color: --sl-color-gray-2;
	}

	summary {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 0.2em var(--sl-sidebar-item-padding-inline);
		cursor: pointer;
		user-select: none;
	}
	summary::marker,
	summary::-webkit-details-marker {
		display: none;
	}

	.caret {
		transition: transform 0.2s ease-in-out;
		flex-shrink: 0;
		display: none;
	}
	:global([dir='rtl']) .caret {
		transform: rotateZ(180deg);
		display: none;
	}
	[open] > summary .caret {
		transform: rotateZ(90deg);
	}

	a {
		display: flex;
		flex-direction: row;
		align-items: center;
		border-radius: 0.25rem;
		text-decoration: none;
		color: var(--sl-color-gray-2);
		padding: 0.1em var(--sl-sidebar-item-padding-inline);
		line-height: 1.4;

		span {
			flex-shrink: 0;
		}
	}

	:global(:where(a)) {
		font-size: 1.08rem !important;
		margin-left: 0.1rem;
	}

	a:hover,
	a:focus {
		color: var(--sl-color-white);
	}

	[aria-current='page'],
	[aria-current='page']:hover,
	[aria-current='page']:focus {
		font-weight: 600;
		color: var(--sl-color-text-invert);
		background-color: var(--sl-color-text-accent);
	}

	.group-label {
		margin-top: 1.7rem;
		font-weight: 550;

		* {
			font-size: 0.96rem !important;
		}
	}

	a > *:not(:last-child),
	.group-label > *:not(:last-child) {
		margin-inline-end: 0.25em;
	}

	@media (min-width: 50rem) {
		.top-level > li + li {
			margin-top: 0.5rem;
		}
		.large {
			font-size: 1.2rem;
		}
		a {
			font-size: var(--sl-text-sm);
		}
	}
</style>
