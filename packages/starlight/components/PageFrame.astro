---
import MobileMenuToggle from 'virtual:starlight/components/MobileMenuToggle';
import type { Props } from '../props';

const { hasSidebar, labels } = Astro.props;
---

<div class="swup page-frame sl-flex">
	<header class="header" data-swup-persist="starlight__header">
		<slot name="header" />
	</header>
	{
		hasSidebar && (
			<nav class="sidebar" aria-label={labels['sidebarNav.accessibleLabel']}>
				<MobileMenuToggle {...Astro.props} />
				<div id="starlight__sidebar" class="sidebar-pane" data-swup-persist="starlight__sidebar">
					<div class="sidebar-content sl-flex">
						<slot name="sidebar" />
					</div>
				</div>
			</nav>
		)
	}
	<script is:inline>
		(function () {
			const sidebarPane = document.querySelector('.sidebar-pane');
			if (sidebarPane) {
				const scrollPosition = sidebarPane.getAttribute('data-scroll-top');
				if (scrollPosition) {
					sidebarPane.scrollTop = +scrollPosition;
				}
				sidebarPane.addEventListener(
					'scroll',
					() => {
						sidebarPane.setAttribute('data-scroll-top', '' + sidebarPane.scrollTop);
					},
					{ passive: true }
				);
			}
		})();
	</script>
	<div class="main-frame transition-fade"><slot /></div>
</div>

<style>
	.page-frame {
		flex-direction: column;
		min-height: 100vh;
	}

	.header {
			position: fixed;
			z-index: var(--sl-z-index-navbar);
		inset-inline-start: 0;
		inset-block-start: 0;
		width: 100%;
		height: var(--sl-nav-height);
		border-bottom: 1px solid var(--sl-color-hairline-shade);
		padding: var(--sl-nav-pad-y) var(--sl-nav-pad-x);
		padding-inline-end: var(--sl-nav-pad-x);
		background-color: var(--sl-color-black);
	}

	:global([data-has-sidebar]) .header {
		padding-inline-end: calc(var(--sl-nav-gap) + var(--sl-nav-pad-x) + var(--sl-menu-button-size));
	}

	.sidebar-pane {
		visibility: var(--sl-sidebar-visibility, hidden);
		position: fixed;
		z-index: var(--sl-z-index-menu);
		inset-block: var(--sl-nav-height) 0;
		inset-inline-start: 0;
		width: 100%;
		background-color: var(--sl-color-black);
		overflow-y: auto;
	}

	:global([aria-expanded='true']) ~ .sidebar-pane {
		--sl-sidebar-visibility: visible;
	}

	.sidebar-content {
		height: 100%;
		min-height: max-content;
		padding: 1rem var(--sl-sidebar-pad-x) 0;
		flex-direction: column;
		gap: 1rem;
	}

	@media (min-width: 50rem) {
		.header {
			background: none;
		}
		.sidebar-content::after {
			content: '';
			padding-bottom: 1px;
		}
	}

	.main-frame {
		padding-top: calc(var(--sl-nav-height) + var(--sl-mobile-toc-height));
		padding-inline-start: var(--sl-content-inline-start);
	}

	@media (min-width: 50rem) {
		:global([data-has-sidebar]) .header {
			padding-inline-end: var(--sl-nav-pad-x);
		}
		.sidebar-pane {
			--sl-sidebar-visibility: visible;
			width: var(--sl-sidebar-width);
			background-color: var(--sl-color-bg-sidebar);
			border-inline-end: 1px solid var(--sl-color-hairline-shade);
		}
	}
</style>
