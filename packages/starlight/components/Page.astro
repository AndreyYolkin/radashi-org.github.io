---
import type { Props } from '../props';

// Built-in CSS styles.
import '../style/props.css';
import '../style/reset.css';
import '../style/shiki.css';
import '../style/util.css';

// Components â€” can override built-in CSS, but not user CSS.
import Banner from 'virtual:starlight/components/Banner';
import ContentPanel from 'virtual:starlight/components/ContentPanel';
import FallbackContentNotice from 'virtual:starlight/components/FallbackContentNotice';
import DraftContentNotice from 'virtual:starlight/components/DraftContentNotice';
import Footer from 'virtual:starlight/components/Footer';
import Head from 'virtual:starlight/components/Head';
import Header from 'virtual:starlight/components/Header';
import Hero from 'virtual:starlight/components/Hero';
import MarkdownContent from 'virtual:starlight/components/MarkdownContent';
import PageFrame from 'virtual:starlight/components/PageFrame';
import PageSidebar from 'virtual:starlight/components/PageSidebar';
import PageTitle from 'virtual:starlight/components/PageTitle';
import Sidebar from 'virtual:starlight/components/Sidebar';
import SkipLink from 'virtual:starlight/components/SkipLink';
import ThemeProvider from 'virtual:starlight/components/ThemeProvider';
import TwoColumnContent from 'virtual:starlight/components/TwoColumnContent';

// Remark component CSS (needs to override `MarkdownContent.astro`)
import '../style/asides.css';

// Important that this is the last import so it can override built-in styles.
import 'virtual:starlight/user-css';

const pagefindEnabled =
	Astro.props.entry.slug !== '404' &&
	!Astro.props.entry.slug.endsWith('/404') &&
	Astro.props.entry.data.pagefind !== false;

const hasSidebar = Astro.props.hasSidebar ? 'true' : null;
const hasToc = Astro.props.toc ? 'true' : null;
const hasHero = Astro.props.entry.data.hero ? 'true' : null;

let lastUpdated = Astro.props.lastUpdated;
let lastUpdatedLink: string | undefined;

if (lastUpdated == null) {
	const fetchLastUpdate = async () => {
		try {
			const { execa } = await import('execa');
			const { slug } = Astro.props;

			let cwd = process.cwd();
			let file: string;

			if (slug.startsWith('reference/')) {
				cwd = 'radashi';
				file = 'docs/' + slug.replace(/^reference\//, '') + '.mdx';
				lastUpdatedLink = `https://github.com/radashi-org/radashi/commits/main/${file}`;
			} else {
				file = 'src/content/docs/' + slug + '.mdx';
			}

			const { stdout } = await execa('git', ['log', '-1', '--format=%cd', file], { cwd });

			console.trace({ slug, file, stdout, cwd });

			if (!stdout) {
				console.error('No stdout from git log');
				return undefined;
			}

			return new Date(stdout);
		} catch (error) {
			console.error('Error fetching last commit date:', error);
			return undefined;
		}
	};

	lastUpdated = await fetchLastUpdate();
}
console.log('[Page] lastUpdated', lastUpdated);
---

<html
	lang={Astro.props.lang}
	dir={Astro.props.dir}
	data-has-toc={hasToc}
	data-has-sidebar={hasSidebar}
	data-has-hero={hasHero}
	data-theme="dark"
>
	<head>
		<Head {...Astro.props} />
		<style>
			html:not([data-has-toc]) {
				--sl-mobile-toc-height: 0rem;
			}
			html:not([data-has-sidebar]) {
				--sl-content-width: 67.5rem;
			}
			/* Add scroll padding to ensure anchor headings aren't obscured by nav */
			html {
				/* Additional padding is needed to account for the mobile TOC */
				scroll-padding-top: calc(1.5rem + var(--sl-nav-height) + var(--sl-mobile-toc-height));
			}
			main {
				padding-bottom: 3vh;
			}
			@media (min-width: 50em) {
				[data-has-sidebar] {
					--sl-content-inline-start: var(--sl-sidebar-width);
				}
			}
			@media (min-width: 72em) {
				html {
					scroll-padding-top: calc(1.5rem + var(--sl-nav-height));
				}
			}
		</style>
		<ThemeProvider {...Astro.props} />
		<script src="/@id/swup.min.js" defer={false}></script>
	</head>
	<body>
		<SkipLink {...Astro.props} />
		<PageFrame {...Astro.props}>
			<Header slot="header" {...Astro.props} />
			<Sidebar slot="sidebar" {...Astro.props} />
			<TwoColumnContent {...Astro.props}>
				<PageSidebar slot="right-sidebar" {...Astro.props} />
				<main
					data-pagefind-body={pagefindEnabled}
					lang={Astro.props.entryMeta.lang}
					dir={Astro.props.entryMeta.dir}
				>
					<div
						class="page transition-fade"
						data-has-toc={hasToc}
						data-has-sidebar={hasSidebar}
						data-has-hero={hasHero}
					>
						<script is:inline>
							(function () {
								const parentElement = document.currentScript?.parentElement;
								console.log('[Page] init script', { parentElement });

								const { hasSidebar, hasToc, hasHero } = parentElement?.dataset || {};

								function setData(element, key, value) {
									if (value == null) {
										delete element.dataset[key];
									} else {
										element.dataset[key] = value;
									}
								}

								const htmlElement = document.documentElement;
								setData(htmlElement, 'hasSidebar', hasSidebar);
								setData(htmlElement, 'hasToc', hasToc);
								setData(htmlElement, 'hasHero', hasHero);

								console.log({ hasSidebar, hasToc, hasHero });

								const sidebar = document.getElementById('starlight__sidebar');
								if (sidebar) {
									sidebar.style.display = hasSidebar ? 'block' : 'none';
								}
							})();
						</script>
						{/* TODO: Revisit how this logic flows. */}
						<Banner {...Astro.props} />
						{
							Astro.props.entry.data.hero ? (
								<ContentPanel {...Astro.props}>
									<Hero {...Astro.props} />
									<MarkdownContent {...Astro.props}>
										<slot />
									</MarkdownContent>
									<Footer {...Astro.props} />
								</ContentPanel>
							) : (
								<>
									{Astro.props.entry.data.template !== 'splash' && (
										<ContentPanel {...Astro.props}>
											<PageTitle {...Astro.props} />
											{Astro.props.entry.data.draft && <DraftContentNotice {...Astro.props} />}
											{Astro.props.isFallback && <FallbackContentNotice {...Astro.props} />}
										</ContentPanel>
									)}
									<ContentPanel {...Astro.props}>
										<MarkdownContent {...Astro.props}>
											<slot />
										</MarkdownContent>
										<Footer
											{...Astro.props}
											lastUpdated={lastUpdated}
											lastUpdatedLink={lastUpdatedLink}
										/>
									</ContentPanel>
								</>
							)
						}
					</div>
				</main>
			</TwoColumnContent>
		</PageFrame>
	</body>
</html>
