---
import type { Props } from '../props';

// Built-in CSS styles.
import '../style/props.css';
import '../style/reset.css';
import '../style/shiki.css';
import '../style/util.css';

// Components â€” can override built-in CSS, but not user CSS.
import Banner from 'virtual:starlight/components/Banner';
import ContentPanel from 'virtual:starlight/components/ContentPanel';
import FallbackContentNotice from 'virtual:starlight/components/FallbackContentNotice';
import DraftContentNotice from 'virtual:starlight/components/DraftContentNotice';
import Footer from 'virtual:starlight/components/Footer';
import Head from 'virtual:starlight/components/Head';
import Header from 'virtual:starlight/components/Header';
import Hero from 'virtual:starlight/components/Hero';
import MarkdownContent from 'virtual:starlight/components/MarkdownContent';
import PageFrame from 'virtual:starlight/components/PageFrame';
import PageSidebar from 'virtual:starlight/components/PageSidebar';
import PageTitle from 'virtual:starlight/components/PageTitle';
import Sidebar from 'virtual:starlight/components/Sidebar';
import SkipLink from 'virtual:starlight/components/SkipLink';
import ThemeProvider from 'virtual:starlight/components/ThemeProvider';
import TwoColumnContent from 'virtual:starlight/components/TwoColumnContent';

// Remark component CSS (needs to override `MarkdownContent.astro`)
import '../style/asides.css';

// Important that this is the last import so it can override built-in styles.
import 'virtual:starlight/user-css';

const pagefindEnabled =
	Astro.props.entry.slug !== '404' &&
	!Astro.props.entry.slug.endsWith('/404') &&
	Astro.props.entry.data.pagefind !== false;
---

<html
	lang={Astro.props.lang}
	dir={Astro.props.dir}
	data-has-toc={Boolean(Astro.props.toc)}
	data-has-sidebar={Astro.props.hasSidebar}
	data-has-hero={Boolean(Astro.props.entry.data.hero)}
	data-theme="dark"
>
	<head>
		<Head {...Astro.props} />
		<style>
			html:not([data-has-toc]) {
				--sl-mobile-toc-height: 0rem;
			}
			html:not([data-has-sidebar]) {
				--sl-content-width: 67.5rem;
			}
			/* Add scroll padding to ensure anchor headings aren't obscured by nav */
			html {
				/* Additional padding is needed to account for the mobile TOC */
				scroll-padding-top: calc(1.5rem + var(--sl-nav-height) + var(--sl-mobile-toc-height));
			}
			main {
				padding-bottom: 3vh;
			}
			@media (min-width: 50em) {
				[data-has-sidebar] {
					--sl-content-inline-start: var(--sl-sidebar-width);
				}
			}
			@media (min-width: 72em) {
				html {
					scroll-padding-top: calc(1.5rem + var(--sl-nav-height));
				}
			}

			/* html {
				--origin-x: calc(var(--click-x, 0.5) * 100%);
				--origin-y: calc(var(--click-y, 0.5) * 100%);
			}

			main {
				position: relative;
			}

			html .transition-reveal:not(.is-previous-container) {
				background: var(--sl-color-bg);
				clip-path: circle(75% at 50% 50%);
				background: blue !important;
				min-height: 100vh;
			}

			html.is-animating .transition-reveal:not(.is-previous-container) {
				clip-path: circle(0% at var(--origin-x) var(--origin-y));
			}

			html.is-changing .transition-reveal:not(.is-previous-container) {
				position: absolute;
				background: red !important;
				width: 100%;
				top: 0;
				z-index: 2;

				transition:
					clip-path 0.4s cubic-bezier(0.5, 0, 0.15, 1),
					mask-position 0.4s cubic-bezier(0.5, 0, 0.15, 1),
					-webkit-mask-position 0.4s cubic-bezier(0.5, 0, 0.15, 1);
			}

			html.is-changing .transition-reveal.is-previous-container {
				position: absolute;
				top: 0;
				z-index: 1;
				left: 0;
			} */

			/* Define a transition duration during page visits */
			html.is-changing .transition-fade {
				transition: opacity 0.125s;
				opacity: 1;
			}
			/* Define the styles for the unloaded pages */
			html.is-animating .transition-fade {
				opacity: 0;
			}
		</style>
		<ThemeProvider {...Astro.props} />
	</head>
	<body>
		<SkipLink {...Astro.props} />
		<PageFrame {...Astro.props}>
			<Header slot="header" {...Astro.props} />
			{Astro.props.hasSidebar && <Sidebar slot="sidebar" {...Astro.props} />}
			<TwoColumnContent {...Astro.props}>
				<PageSidebar slot="right-sidebar" {...Astro.props} />
				<main
					data-pagefind-body={pagefindEnabled}
					lang={Astro.props.entryMeta.lang}
					dir={Astro.props.entryMeta.dir}
				>
					<div id="swup" class="page transition-fade">
						{/* TODO: Revisit how this logic flows. */}
						<Banner {...Astro.props} />
						{
							Astro.props.entry.data.hero ? (
								<ContentPanel {...Astro.props}>
									<Hero {...Astro.props} />
									<MarkdownContent {...Astro.props}>
										<slot />
									</MarkdownContent>
									<Footer {...Astro.props} />
								</ContentPanel>
							) : (
								<>
									<ContentPanel {...Astro.props}>
										<PageTitle {...Astro.props} />
										{Astro.props.entry.data.draft && <DraftContentNotice {...Astro.props} />}
										{Astro.props.isFallback && <FallbackContentNotice {...Astro.props} />}
									</ContentPanel>
									<ContentPanel {...Astro.props}>
										<MarkdownContent {...Astro.props}>
											<slot />
										</MarkdownContent>
										<Footer {...Astro.props} />
									</ContentPanel>
								</>
							)
						}
					</div>
				</main>
			</TwoColumnContent>
		</PageFrame>
		<script>
			import Swup from 'swup';
			// import SwupParallelPlugin from '@swup/parallel-plugin';

			declare global {
				var swup: Swup;
			}

			globalThis.swup = new Swup();
			// globalThis.swup = new Swup({
			// 	plugins: [new SwupParallelPlugin()],
			// });

			// swup.hooks.on('visit:start', (context) => {
			// 	let x = 0.5;
			// 	let y = 0.5;
			// 	const event = context.trigger.event as MouseEvent;
			// 	if (event && typeof event.clientX === 'number') {
			// 		x = event.clientX / window.innerWidth;
			// 		y = event.clientY / window.innerHeight;
			// 	}
			// 	document.documentElement.style.setProperty('--click-x', x.toString());
			// 	document.documentElement.style.setProperty('--click-y', y.toString());
			// });
		</script>
	</body>
</html>
