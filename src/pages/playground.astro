---
import type { Project } from '@stackblitz/sdk'
import glob from 'fast-glob'
import MarkdownIt from 'markdown-it'
import markdownItFrontMatter from 'markdown-it-front-matter'
import fs from 'node:fs'
import path from 'node:path'
import { noop } from 'radashi'
import { dedent } from '../util/dedent'
import { parse } from '@babel/parser'

const md = new MarkdownIt()
md.use(markdownItFrontMatter, noop)

// Files added to the StackBlitz project.
const files: Record<string, string> = {}

const cwd = new URL('../../radashi', import.meta.url).pathname
const mdxFiles = await glob('docs/**/*.mdx', { cwd })

mdxFiles.sort().forEach(mdxFileName => {
  const env: Record<string, any> = {}
  const tokens = md.parse(
    fs.readFileSync(path.join(cwd, mdxFileName), 'utf8'),
    env
  )
  for (const token of tokens) {
    if (token.tag === 'code' && token.block) {
      try {
        // Ensure the code is valid TypeScript.
        parse(token.content, {
          sourceType: 'module',
          plugins: ['typescript'],
        })
      } catch (error) {
        continue
      }

      const fileName = mdxFileName.replace(/\.mdx$/, '.ts').replace('docs/', '')
      files[fileName] = dedent`
        import * as _ from 'radashi'

        export async function run() {
          ${token.content.replace(/(^|\n)import .*? from 'radashi';?/g, '').trim()}
        }
      `
      break
    }
  }
})

const importStmts = Object.keys(files).map(
  fileName => `// import('./${fileName}').then(run)`
)

files['index.ts'] = dedent`
  import * as _ from 'radashi'

  ${importStmts.join('\n')}





  /*****************************************/
  /* The rest of this file can be ignored. */
  /*****************************************/

  function run(module: any) {
    module.run()
  }

  if (!globalThis.__loaded) {
    globalThis.__loaded = true

    for (const key in _) {
      const fn = _[key]

      _[key] = function(...args) {
        console.log('> ' + key + \` called with \${args.length} \${args.length === 1 ? 'argument' : 'arguments'}\`)
        args.forEach((arg) => console.log(' ', typeof arg === 'string' ? JSON.stringify(arg) : arg))

        let result
        try {
          result = fn(...args)

          console.log('< ' + key + ' returned:')
          console.log(' ', result)

          if (result instanceof Promise) {
            const start = Date.now()
            result.then(
              result => {
                console.log('< ' + key + ' resolved with: (' + (Date.now() - start) + 'ms later)')
                console.log(' ', result)
              },
              error => {
                console.error('< ' + key + ' rejected with:', error)
              }
            )
          }
        } catch (error) {
          console.error('< ' + key + ' threw:', error)
          throw error
        }
        
        return result
      }
    }
  }
`

const warningIcon = dedent`
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 512 512" style="transform: translateY(0.25rem);"><path fill="#ecbc68" d="M449.07 399.08L278.64 82.58c-12.08-22.44-44.26-22.44-56.35 0L51.87 399.08A32 32 0 0 0 80 446.25h340.89a32 32 0 0 0 28.18-47.17m-198.6-1.83a20 20 0 1 1 20-20a20 20 0 0 1-20 20m21.72-201.15l-5.74 122a16 16 0 0 1-32 0l-5.74-121.95a21.73 21.73 0 0 1 21.5-22.69h.21a21.74 21.74 0 0 1 21.73 22.7Z"/></svg>
`

files['index.html'] = dedent`
  <h2>Radashi Playground</h2>
  <p style="font-size: 0.8rem; opacity: 0.7;">
    Welcome! This playground is re-generated whenever the documentation site is updated. It contains most of the examples from our documentation.
  </p>
  <p>
    Try uncommenting any of the imports in <code>index.ts</code> to run an example. Once uncommented, try using command+click on the imported file path to see the example's source code, or you can navigate via the file tree in the left sidebar. Try editing the example to see how it changes.
  </p>
  <p style="color: #ecbc68;">
    ${warningIcon} Uncaught errors appear in the devtools console (cmd+option+i), but not the in-browser console.
  </p>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, sans-serif;
      background: #15181e;
      color: #fff;
    }
    p {
      line-height: 1.4;
    }
  </style>
`

const project: Project = {
  title: 'Radashi Playground',
  description:
    'Explore the functions of Radashi by running and editing their documentation examples.',
  template: 'typescript',
  files,
  dependencies: {
    radashi: 'beta',
  },
}
---

<head>
  <title>Radashi Playground</title>
  <link rel="shortcut icon" href="/favicon.svg" type="image/svg+xml" />
</head>

<iframe id="embed" style="visibility: hidden;"></iframe>

<script
  id="stackblitz-project"
  type="application/json"
  set:html={JSON.stringify(project)}
/>

<script>
  import sdk from '@stackblitz/sdk'

  const embed = document.getElementById('embed')!
  const project = JSON.parse(
    document.getElementById('stackblitz-project')!.textContent!
  )

  sdk.embedProject(embed, project, {
    height: window.innerHeight + 'px',
    openFile: 'index.ts',
    terminalHeight: 0,
    devToolsHeight: 50,
    hideNavigation: true,
    showSidebar: true,
  })

  requestAnimationFrame(() => {
    embed.style.visibility = 'visible'
  })
</script>

<style>
  body {
    margin: 0;
  }
</style>
